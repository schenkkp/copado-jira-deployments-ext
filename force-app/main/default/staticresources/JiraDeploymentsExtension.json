{
  "recordTypeMap": {},
  "RecordSetBundles": [
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__JobTemplate__c",
            "url": "/services/data/v60.0/sobjects/copado__JobTemplate__c/a0w4w00000LURBkAAP"
          },
          "copado__ApiName__c": "Jira_Deployment_Notification_1",
          "copado__Type__c": "Custom",
          "copado__Version__c": 1,
          "Id": "a0w4w00000LURBkAAP",
          "LastReferencedDate": "2024-04-27T22:21:30.000+0000",
          "LastViewedDate": "2024-04-27T22:21:30.000+0000",
          "Name": "Jira Deployment Notification"
        }
      ],
      "ObjectType": "copado__JobTemplate__c"
    },
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__JobStep__c",
            "url": "/services/data/v60.0/sobjects/copado__JobStep__c/a0v4w0000351NRAAA2"
          },
          "copado__ApiName__c": "Jira_Deployments_1_Submit_Deployment_to_Jira_1",
          "copado__ConfigJson__c": "{\"functionName\":\"jira_submit_deployment_data\",\"parameters\":[{\"name\":\"JIRA_CLOUD_ID\",\"value\":\"{$Pipeline.Property.JIRA_CLOUD_ID}\",\"required\":true},{\"name\":\"JIRA_CLIENT_ID\",\"value\":\"{$Pipeline.Property.JIRA_CLIENT_ID}\",\"required\":true},{\"name\":\"JIRA_CLIENT_SECRET\",\"value\":\"{$Pipeline.Property.JIRA_CLIENT_SECRET}\",\"required\":true},{\"name\":\"PROMOTION_ID\",\"value\":\"{$Job.ExecutionParent.Id}\",\"required\":true},{\"name\":\"DEBUG_MODE\",\"value\":\"\",\"required\":false}]}",
          "copado__CustomType__c": "Function",
          "copado__IsSkipped__c": false,
          "copado__JobTemplate__c": "a0w4w00000LURBkAAP",
          "copado__Order__c": 1,
          "copado__Type__c": "Function",
          "Id": "a0v4w0000351NRAAA2",
          "Name": "Notify Jira of Deployment Status"
        }
      ],
      "ObjectType": "copado__JobStep__c"
    },
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__Function__c",
            "url": "/services/data/v60.0/sobjects/copado__Function__c/a0n4w00000XQ9jbAAD"
          },
          "copado__API_Name__c": "jira_submit_deployment_data",
          "copado__Image_Name__c": "vpszr8i9hax7xyojo5glc38nvtpugy-accenture-sfdc:v1.0",
          "copado__Options__c": "[ ]",
          "copado__Parameters__c": "[ {\n  \"required\" : true,\n  \"name\" : \"JIRA_CLOUD_ID\",\n  \"defaultValue\" : \"{$Pipeline.Property.JIRA_CLOUD_ID}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"JIRA_CLIENT_ID\",\n  \"defaultValue\" : \"{$Pipeline.Property.JIRA_CLIENT_ID}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"JIRA_CLIENT_SECRET\",\n  \"defaultValue\" : \"{$Pipeline.Property.JIRA_CLIENT_SECRET}\"\n}, {\n  \"required\" : true,\n  \"name\" : \"PROMOTION_ID\",\n  \"defaultValue\" : \"{$Job.ExecutionParent.Id}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"DEST_ENV_TYPE\",\n  \"defaultValue\" : \"{$Destination.Property.JIRA_ENVIRONMENT_TYPE}\"\n}, {\n  \"required\" : false,\n  \"name\" : \"DEBUG_MODE\",\n  \"defaultValue\" : \"\"\n} ]",
          "copado__Script__c": "#!/usr/bin/env python\nimport numpy as np\r\nfrom simple_salesforce import Salesforce, format_soql\r\nfrom shlex import quote\r\nimport pandas as pd\r\nimport os\r\nimport requests\r\nimport json\r\nfrom datetime import datetime\r\nfrom copy import deepcopy\r\n\r\nAPI_VERSION = '60.0'    # SFDX API Version\r\nCHUNK_SIZE = 500        # Chunk size of issues allowed per Deployment payload request\r\nTOKEN_URL = 'https://api.atlassian.com/oauth/token'  # Atlassian Token request URL\r\nDEPLOY_ENDPOINT = 'https://api.atlassian.com/jira/deployments/0.1/cloud/{}/bulk'  # Atlassian Deployment API request URL\r\nDEBUG_MODE = False      # By default, debugging mode is disabled\r\n\r\n\r\ndef get_token(jira_client_id, jira_client_secret):\r\n  \"\"\" Using the CLIENT_ID and CLIENT_SECRET from Jira Cloud, \r\n      obtains and returns the access token for the payload request. \"\"\"\r\n\r\n  # Define the payload (data)\r\n  payload = {\r\n      \"audience\": \"api.atlassian.com\",\r\n      \"grant_type\": \"client_credentials\",\r\n      \"client_id\": jira_client_id,\r\n      \"client_secret\": jira_client_secret\r\n  }\r\n\r\n  # Define headers\r\n  headers = {\r\n      'Content-Type': 'application/json'\r\n  }\r\n\r\n  # Make the POST request\r\n  response = requests.post(TOKEN_URL, json=payload, headers=headers)\r\n\r\n  # Check the response\r\n  if response.status_code == 200:\r\n      return response.json()['access_token']\r\n  else:\r\n      print(f\"Error: {response.status_code}\")\r\n      print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(\",\", \": \")))\r\n      log('Error obtaining access token', error=response.json()['error_description'], data=json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(\",\", \": \")))\r\n\r\n\r\n# log progress\r\ndef log(message, error=None, data=None):\r\n    command = 'copado --progress {}'.format(quote(message))\r\n    if error is not None:\r\n        command = command + ' --error-message {}'.format(quote(error))\r\n    if data is not None:\r\n        command = command + ' --result-data {}'.format(quote(data))\r\n    os.system(command)\r\n\r\n# process simple-salesforce query results\r\ndef sf_api_query(data):\r\n    if data['totalSize'] == 0:\r\n        raise Exception(\"No data returned.\")\r\n\r\n    df = pd.DataFrame(data['records']).drop('attributes', axis=1)\r\n    listColumns = list(df.columns)\r\n    for col in listColumns:\r\n        if any (isinstance (df[col].values[i], dict) for i in range(0, len(df[col].values))):\r\n            df = pd.concat([df.drop(columns=[col]),df[col].apply(pd.Series).drop('attributes',axis=1).add_prefix(col+'.')],axis=1)\r\n            new_columns = np.setdiff1d(df.columns, listColumns)\r\n            for i in new_columns:\r\n                listColumns.append(i)\r\n    return df\r\n\r\ndef get_epoch_time():\r\n    \"\"\"Get current time in epoch seconds.\"\"\"\r\n    return int(datetime.now().timestamp())\r\n\r\ndef get_promo_no(promo_name):\r\n    \"\"\"Extract deployment sequence number from promotion name.\"\"\"\r\n    return int(promo_name[1:])\r\n\r\ndef get_state(promo_status):\r\n    \"\"\"\r\n    Map Copado Promotion Status to Jira Deployment state.\r\n    enum: unknown, pending, in_progress, cancelled, failed, rolled_back, successful\r\n    \"\"\"\r\n    return {\r\n        'Scheduled': 'pending',\r\n        'In Progress': 'in_progress',\r\n        'Completed': 'successful',\r\n        'Cancelled': 'cancelled',\r\n        'Completed with errors': 'failed'\r\n    }.get(promo_status, 'unknown')\r\n\r\ndef get_name(promo):\r\n    \"\"\"Generate displayName field for the Deployment.\"\"\"\r\n    source = promo['copado__Source_Environment__r.Name']\r\n    destination = promo['copado__Destination_Environment__r.Name']\r\n    if promo['copado__Back_Promotion__c']:\r\n        return f'{destination} \\u276e {source} ({promo[\"Name\"]})'\r\n    else:\r\n        return f'{source} \\u276f {destination} ({promo[\"Name\"]})'\r\n    \r\ndef get_env_type(env_type):\r\n    \"\"\"\r\n    Map environment type to Jira environment type.\r\n    enum: unmapped, development, testing, staging, production\r\n    \"\"\"\r\n    return {\r\n        'development': 'development',\r\n        'testing': 'testing',\r\n        'staging': 'staging',\r\n        'production': 'production'\r\n    }.get(env_type, 'unmapped')\r\n\r\ndef get_promoted_stories(promotion_id, copa_sf):\r\n    \"\"\"\r\n    Fetches promoted user stories based on a given promotion ID.\r\n\r\n    Args:\r\n        promotion_id (str): The ID of the promotion to fetch user stories for.\r\n        copa_sf (SalesforceConnection): An instance of a Salesforce connection object.\r\n\r\n    Returns:\r\n        list: A list of external IDs for the promoted user stories.\r\n    \"\"\"\r\n    # Define the initial query with placeholders for safe formatting\r\n    query = (\"SELECT copado__User_Story__c, \"\r\n             \"copado__User_Story__r.copadoconnect__External_ID__c, \"\r\n             \"copado__User_Story__r.copado__Is_Bundle__c \"\r\n             \"FROM copado__Promoted_User_Story__c \"\r\n             \"WHERE copado__Promotion__c = {promotion_id}\")\r\n    \r\n    # Execute the query using a method that safely formats and executes the SOQL query\r\n    story_df = sf_api_query(copa_sf.query_all(format_soql(query, promotion_id=promotion_id)))\r\n\r\n    # Filter non-null External IDs\r\n    external_ids = story_df['copado__User_Story__r.copadoconnect__External_ID__c'].dropna().tolist()\r\n\r\n    # Filter stories that are bundles\r\n    bundle_df = story_df[story_df['copado__User_Story__r.copado__Is_Bundle__c']]\r\n    bundle_list = bundle_df['copado__User_Story__c'].tolist()\r\n\r\n    # Get bundled user stories with non-null external ID\r\n    if bundle_list:\r\n        bundle_query = (\"SELECT copado__User_Story__r.copadoconnect__External_ID__c \"\r\n                        \"FROM copado__Bundled_Story__c \"\r\n                        \"WHERE copado__User_Story__r.copadoconnect__External_ID__c != null \"\r\n                        \"AND copado__Package_Version__r.copado__User_Story__c IN {bundle_list}\")\r\n        \r\n        # Execute the query for bundled stories\r\n        bundled_external_ids = sf_api_query(copa_sf.query_all(format_soql(bundle_query, bundle_list=bundle_list)))\r\n        bundled_external_ids = bundled_external_ids['copado__User_Story__r.copadoconnect__External_ID__c'].dropna().tolist()\r\n\r\n        # Combine the lists of external IDs\r\n        external_ids += bundled_external_ids\r\n\r\n    return external_ids\r\n\r\ndef chunk(lst, chunk_size=500):\r\n    # Using list comprehension to split the list into chunks of {chunk_size}\r\n    return [lst[i:i + chunk_size] for i in range(0, len(lst), chunk_size)]\r\n\r\ndef get_deployments(stories_list, promo_no, payload):\r\n    deployments = []\r\n    i = 0\r\n    for c in chunk(stories_list, CHUNK_SIZE):\r\n        pl = deepcopy(payload)\r\n        pl[\"associations\"][0][\"values\"] = c\r\n        pl[\"deploymentSequenceNumber\"] = promo_no * 10 + i\r\n        deployments.append(pl)\r\n        i += 1\r\n    return deployments\r\n\r\ndef main():\r\n    # @param (global)\r\n    COPA_ENDPOINT = os.environ['CF_SF_ENDPOINT']\r\n    COPA_SESSION = os.environ['CF_SF_SESSIONID']\r\n\r\n    # @param (function parameters)\r\n    # https://<your-jira-instance>.atlassian.net/_edge/tenant_info\r\n    JIRA_CLOUD_ID = os.environ['JIRA_CLOUD_ID']\r\n\r\n    # Define your client ID and client secret\r\n    # https://<your-jira-instance>.atlassian.net/secure/admin/oauth-credentials\r\n    JIRA_CLIENT_ID = os.environ['JIRA_CLIENT_ID']\r\n    JIRA_CLIENT_SECRET = os.environ['JIRA_CLIENT_SECRET']\r\n\r\n    JIRA_ENDPOINT = DEPLOY_ENDPOINT.format(JIRA_CLOUD_ID)\r\n    JIRA_TOKEN = get_token(JIRA_CLIENT_ID, JIRA_CLIENT_SECRET)\r\n\r\n    PROMOTION_ID = os.environ['PROMOTION_ID']\r\n    DEST_ENV_TYPE = os.environ['DEST_ENV_TYPE'].lower()\r\n\r\n    # @param DEBUG_MODE\r\n    if os.environ['DEBUG_MODE'].lower() in ['true', '1', 't', 'y', 'yes']:\r\n        DEBUG_MODE = True\r\n        log('DEBUG_MODE is ON')\r\n    else:\r\n        DEBUG_MODE = False\r\n\r\n    if DEBUG_MODE:\r\n        print('PROMOTION_ID = ' + PROMOTION_ID)\r\n        print('DEST_ENV_TYPE = ' + DEST_ENV_TYPE)\r\n\r\n    #connect to salesforce (Copado org)\r\n    copa_sf = Salesforce(instance_url=COPA_ENDPOINT, session_id=COPA_SESSION, version=API_VERSION)\r\n\r\n    # get promotion data (Name, Source, Dest Env, Dest Env Name, Dest Env Type, IsBackPromotion, Pipeline ID, Pipeline Name, Status,)\r\n    # build soql query\r\n    query = ('Select Id, Name, copado__Source_Environment__r.Name, copado__Destination_Environment__c, copado__Destination_Environment__r.Name, '\r\n            'copado__Back_Promotion__c, copado__Project__r.copado__Deployment_Flow__c, '\r\n            'copado__Project__r.copado__Deployment_Flow__r.Name, copado__Status__c, LastModifiedDate FROM copado__Promotion__c '\r\n            'WHERE Id = {promotion_id}')\r\n    promo_df = sf_api_query(copa_sf.query_all(format_soql(query, promotion_id=PROMOTION_ID))).to_dict('records')[0]\r\n\r\n    promotion_no = get_promo_no(promo_df['Name'])\r\n    promoted_stories_lst = get_promoted_stories(PROMOTION_ID, copa_sf)\r\n\r\n    if len(promoted_stories_lst) == 0:\r\n        log('No Stories in Promotion have Jira Keys')\r\n        return\r\n\r\n    deployment_payload = {\r\n        \"deploymentSequenceNumber\": None,\r\n        \"updateSequenceNumber\": get_epoch_time(),\r\n        \"associations\": [\r\n            {\r\n                \"associationType\": \"issueIdOrKeys\",\r\n                \"values\": None\r\n            }\r\n        ],\r\n        \"displayName\": get_name(promo_df)[:255],\r\n        \"description\": '{}: {} to {}'.format(promo_df['Name'], promo_df['copado__Source_Environment__r.Name'], promo_df['copado__Destination_Environment__r.Name']),\r\n        \"url\": COPA_ENDPOINT + \"/\" + promo_df['Id'],\r\n        \"lastUpdated\": datetime.strptime(promo_df['LastModifiedDate'], \"%Y-%m-%dT%H:%M:%S.%f%z\").isoformat(),\r\n        \"state\": get_state(promo_df['copado__Status__c']),\r\n        \"pipeline\": {\r\n            \"id\": promo_df['copado__Project__r.copado__Deployment_Flow__c'],\r\n            \"displayName\": promo_df['copado__Project__r.copado__Deployment_Flow__r.Name'],\r\n            \"url\": COPA_ENDPOINT + \"/\" + promo_df['copado__Project__r.copado__Deployment_Flow__c']\r\n        },\r\n        \"environment\": {\r\n            \"id\": promo_df['copado__Destination_Environment__c'],\r\n            \"displayName\": promo_df['copado__Destination_Environment__r.Name'],\r\n            \"type\": get_env_type(DEST_ENV_TYPE)\r\n        },\r\n        \"schemaVersion\": \"1.0\"\r\n    }\r\n\r\n    if DEBUG_MODE:\r\n        print(json.dumps(json.loads(deployment_payload), indent=4, separators=(\",\", \": \")))\r\n\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + JIRA_TOKEN\r\n    }\r\n\r\n    payload = json.dumps( {\r\n        \"properties\": {},\r\n        \"deployments\": get_deployments(promoted_stories_lst, promotion_no, deployment_payload),\r\n        \"providerMetadata\": {\r\n            \"product\": \"Copado Deployer\"\r\n        }\r\n    } )\r\n\r\n    if DEBUG_MODE:\r\n        print(json.dumps(json.loads(payload), indent=4, separators=(\",\", \": \")))\r\n\r\n    response = requests.request(\r\n        \"POST\",\r\n        JIRA_ENDPOINT,\r\n        data=payload,\r\n        headers=headers\r\n    )\r\n\r\n    if DEBUG_MODE:\r\n        print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(\",\", \": \")))\r\n\r\n    # Check the response\r\n    if response.status_code == 202:\r\n        print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(\",\", \": \")))\r\n        log('Successful Deployment API callout', data=json.dumps(json.loads(response.text), indent=4, separators=(\",\", \": \")))\r\n    else:\r\n        print(f\"Error: {response.status_code}\")\r\n        print(json.dumps(json.loads(response.text), indent=4, separators=(\",\", \": \")))\r\n        log('Error in Deployment API callout', error='Error in Deployment API callout', data=json.dumps(json.loads(response.text), indent=4, separators=(\",\", \": \")))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()",
          "copado__Timeout__c": 60,
          "copado__Type__c": "Custom",
          "copado__Version__c": "1",
          "copado__Worker_Size__c": "S",
          "Id": "a0n4w00000XQ9jbAAD",
          "LastReferencedDate": "2024-05-11T19:15:09.000+0000",
          "LastViewedDate": "2024-05-11T19:15:09.000+0000",
          "Name": "Jira Submit Deployment Data"
        }
      ],
      "ObjectType": "copado__Function__c"
    }
  ],
  "blobsByUID": {}
}